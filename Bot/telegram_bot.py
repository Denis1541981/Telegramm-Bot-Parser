import asyncio
from dotenv import load_dotenv, find_dotenv
import os
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from Bot.hes_vacancy import Hash_Vacancy
from Bot.parser_hh import ZarplataParser

load_dotenv(find_dotenv('.env'))

token = os.getenv("TOKEN")

bot = Bot(token)
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
subscribers = set()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="/help"), KeyboardButton(text="/subscribe")],
            [KeyboardButton(text="/unsubscribe"), KeyboardButton(text="/latest")]
        ],
        resize_keyboard=True
    )
    return keyboard


@dp.message(CommandStart())
async def process_start_command(message: Message):
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π —Å Zarplata.ru.\n'
        '–ò—Å–ø–æ–ª—å–∑—É–π /subscribe —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏.\n'
        '–ò—Å–ø–æ–ª—å–∑—É–π /latest —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏.\n'
        '–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: /help',
        reply_markup=get_main_keyboard()
    )


@dp.message(Command(commands='help'))
async def process_help_command(message: Message):
    await message.answer(
        'üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n'
        '/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n'
        '/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n'
        '/subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏\n'
        '/unsubscribe - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏\n'
        '/latest - –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏\n\n'
        '–ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å Zarplata.ru',
        reply_markup=get_main_keyboard()
    )


@dp.message(Command(commands='subscribe'))
async def subscribe_user(message: Message):
    user_id = message.from_user.id
    if user_id not in subscribers:
        subscribers.add(user_id)
        await message.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π!")
    else:
        await message.answer("‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.")


@dp.message(Command(commands='unsubscribe'))
async def unsubscribe_user(message: Message):
    user_id = message.from_user.id
    if user_id in subscribers:
        subscribers.remove(user_id)
        await message.answer("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")
    else:
        await message.answer("‚ÑπÔ∏è –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.")


@dp.message(Command(commands='latest'))
async def send_latest_vacancies(message: Message):
    await message.answer("‚è≥ –ò—â—É –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏...")
    try:
        async for vacancies in ZarplataParser.get_vacancies():
            hasher = Hash_Vacancy(vacancies)
            added = hasher.process()
            if added:
                for vacancy in added[:5]:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 5 —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
                    await message.answer(format_vacancy(vacancy))
                break
            else:
                await message.answer("–ù–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                break
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π: {str(e)}")


def format_vacancy(vacancy):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤–∞–∫–∞–Ω—Å–∏—é –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    return (f"üè¢ {vacancy.get('company', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üîπ {vacancy.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
            f"üíµ {vacancy.get('salary', '–ó/–ø –Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"üìç {vacancy.get('location', '–õ–æ–∫–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"üîó {vacancy.get('link', '#')}")


async def check_new_vacancies():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    while True:
        try:
            async for vacancies in ZarplataParser.get_vacancies():
                hasher = Hash_Vacancy(vacancies)
                added = hasher.process()
                if added and subscribers:
                    for vacancy in added:
                        formatted = format_vacancy(vacancy)
                        for user_id in subscribers:
                            try:
                                await bot.send_message(user_id, formatted)
                                await asyncio.sleep(0.1)  # –ß—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
                            except Exception as e:
                                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")
                await asyncio.sleep(60 * 30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π: {e}")
            await asyncio.sleep(60 * 5)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π


async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π
    asyncio.create_task(check_new_vacancies())

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())