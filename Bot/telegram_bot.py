import asyncio
import logging
import sqlite3
from datetime import datetime
from dotenv import load_dotenv, find_dotenv
import os
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from Bot.hes_vacancy import Hash_Vacancy
from Bot.parser_hh import ZarplataParser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("vacancy_bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

load_dotenv(find_dotenv('.env'))
token = os.getenv("TOKEN")

bot = Bot(token)
dp = Dispatcher()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite
def init_db():
    with sqlite3.connect('vacancy_bot.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS subscribers (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                subscribed_at TIMESTAMP,
                filters TEXT
            )
        ''')
        conn.commit()


init_db()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="/help"), KeyboardButton(text="/subscribe")],
            [KeyboardButton(text="/unsubscribe"), KeyboardButton(text="/latest")],
            [KeyboardButton(text="/set_filters"), KeyboardButton(text="/my_filters")]
        ],
        resize_keyboard=True
    )
    return keyboard


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
def get_pagination_keyboard(page: int, total_pages: int, prefix: str):
    builder = InlineKeyboardBuilder()

    if page > 1:
        builder.add(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"{prefix}_prev_{page - 1}"
        ))

    builder.add(InlineKeyboardButton(
        text=f"{page}/{total_pages}",
        callback_data="current_page"
    ))

    if page < total_pages:
        builder.add(InlineKeyboardButton(
            text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è",
            callback_data=f"{prefix}_next_{page + 1}"
        ))

    return builder.as_markup()


# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
def format_vacancy(vacancy):
    return (f"üè¢ {vacancy.get('company', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üîπ {vacancy.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
            f"üíµ {vacancy.get('salary', '–ó/–ø –Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"üìç {vacancy.get('location', '–õ–æ–∫–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"üîó {vacancy.get('link', '#')}")


# ========== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ==========
@dp.message(CommandStart())
async def process_start_command(message: Message):
    logger.info(f"User {message.from_user.id} started the bot")
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π —Å Zarplata.ru.\n'
        '–ò—Å–ø–æ–ª—å–∑—É–π /subscribe —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏.\n'
        '–ò—Å–ø–æ–ª—å–∑—É–π /latest —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏.\n'
        '–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: /help',
        reply_markup=get_main_keyboard()
    )


@dp.message(Command(commands='help'))
async def process_help_command(message: Message):
    await message.answer(
        'üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n'
        '/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n'
        '/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n'
        '/subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É\n'
        '/unsubscribe - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏\n'
        '/latest - –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏\n'
        '/set_filters - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º\n'
        '/my_filters - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã',
        reply_markup=get_main_keyboard()
    )


@dp.message(Command(commands='subscribe'))
async def subscribe_user(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or str(user_id)

    with sqlite3.connect('vacancy_bot.db') as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT 1 FROM subscribers WHERE user_id = ?', (user_id,))
        exists = cursor.fetchone()

        if not exists:
            cursor.execute(
                'INSERT INTO subscribers (user_id, username, subscribed_at) VALUES (?, ?, ?)',
                (user_id, username, datetime.now())
            )
            conn.commit()
            logger.info(f"User {user_id} subscribed")
            await message.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π!")
        else:
            await message.answer("‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.")


@dp.message(Command(commands='unsubscribe'))
async def unsubscribe_user(message: Message):
    user_id = message.from_user.id

    with sqlite3.connect('vacancy_bot.db') as conn:
        cursor = conn.cursor()
        cursor.execute('DELETE FROM subscribers WHERE user_id = ?', (user_id,))
        conn.commit()

        if cursor.rowcount > 0:
            logger.info(f"User {user_id} unsubscribed")
            await message.answer("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")
        else:
            await message.answer("‚ÑπÔ∏è –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.")


@dp.message(Command(commands='set_filters'))
async def set_filters_command(message: Message):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n"
        "–ü—Ä–∏–º–µ—Ä: Python, Django, —É–¥–∞–ª—ë–Ω–∫–∞"
    )


@dp.message(F.text & ~F.text.startswith('/'))
async def process_filters(message: Message):
    user_id = message.from_user.id
    filters = message.text.strip()

    with sqlite3.connect('vacancy_bot.db') as conn:
        cursor = conn.cursor()
        cursor.execute(
            'UPDATE subscribers SET filters = ? WHERE user_id = ?',
            (filters, user_id)
        )
        conn.commit()

    logger.info(f"User {user_id} set filters: {filters}")
    await message.answer(f"‚úÖ –§–∏–ª—å—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {filters}")


@dp.message(Command(commands='my_filters'))
async def show_filters(message: Message):
    user_id = message.from_user.id

    with sqlite3.connect('vacancy_bot.db') as conn:
        cursor = conn.cursor()
        cursor.execute(
            'SELECT filters FROM subscribers WHERE user_id = ?',
            (user_id,)
        )
        result = cursor.fetchone()

    filters = result[0] if result and result[0] else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    await message.answer(f"–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã: {filters}")


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
user_vacancies = {}


@dp.message(Command(commands='latest'))
async def send_latest_vacancies(message: Message):
    user_id = message.from_user.id
    await message.answer("‚è≥ –ò—â—É –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with sqlite3.connect('vacancy_bot.db') as conn:
            cursor = conn.cursor()
            cursor.execute(
                'SELECT filters FROM subscribers WHERE user_id = ?',
                (user_id,)
            )
            result = cursor.fetchone()
            filters = result[0].split(',') if result and result[0] else None

        # –ü–æ–ª—É—á–∞–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏
        filtered_vacancies = []
        async for vacancies in ZarplataParser.get_vacancies():
            hasher = Hash_Vacancy(vacancies)
            added = hasher.process()

            if added:
                if filters:
                    for vacancy in added:
                        if any(keyword.lower() in vacancy.get('title', '').lower() or
                               keyword.lower() in vacancy.get('description', '').lower()
                               for keyword in filters):
                            filtered_vacancies.append(vacancy)
                else:
                    filtered_vacancies.extend(added)

        if filtered_vacancies:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            user_vacancies[user_id] = filtered_vacancies
            total_pages = len(filtered_vacancies) // 5 + 1

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await send_vacancy_page(user_id, message.chat.id, 1)

        else:
            await message.answer("–ù–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    except Exception as e:
        logger.error(f"Error getting vacancies for {user_id}: {str(e)}")
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π: {str(e)}")


async def send_vacancy_page(user_id: int, chat_id: int, page: int):
    vacancies = user_vacancies.get(user_id, [])
    if not vacancies:
        await bot.send_message(chat_id, "–í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    total_pages = (len(vacancies) // 5) + 1
    page = max(1, min(page, total_pages))
    start_idx = (page - 1) * 5
    end_idx = start_idx + 5

    for vacancy in vacancies[start_idx:end_idx]:
        await bot.send_message(chat_id, format_vacancy(vacancy))

    if len(vacancies) > 5:
        await bot.send_message(
            chat_id,
            f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}",
            reply_markup=get_pagination_keyboard(page, total_pages, "vacancy")
        )


@dp.callback_query(F.data.startswith("vacancy_"))
async def handle_pagination(callback_query):
    data = callback_query.data
    user_id = callback_query.from_user.id
    chat_id = callback_query.message.chat.id

    if data.startswith("vacancy_prev_"):
        page = int(data.split("_")[2])
        await send_vacancy_page(user_id, chat_id, page)
    elif data.startswith("vacancy_next_"):
        page = int(data.split("_")[2])
        await send_vacancy_page(user_id, chat_id, page)

    await callback_query.answer()


async def check_new_vacancies():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    while True:
        try:
            logger.info("Checking for new vacancies...")

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Å –∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
            with sqlite3.connect('vacancy_bot.db') as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT user_id, filters FROM subscribers')
                subscribers = cursor.fetchall()

            if not subscribers:
                await asyncio.sleep(60 * 30)
                continue

            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
            async for vacancies in ZarplataParser.get_vacancies():
                hasher = Hash_Vacancy(vacancies)
                added = hasher.process()

                if not added:
                    continue

                # –†–∞—Å—Å—ã–ª–∞–µ–º –∫–∞–∂–¥–æ–º—É –ø–æ–¥–ø–∏—Å—á–∏–∫—É —Å —É—á–µ—Ç–æ–º –µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤
                for user_id, filters in subscribers:
                    filters_list = filters.split(',') if filters else None
                    sent_count = 0

                    for vacancy in added:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                        if filters_list:
                            if not any(keyword.lower() in vacancy.get('title', '').lower() or
                                       keyword.lower() in vacancy.get('description', '').lower()
                                       for keyword in filters_list):
                                continue

                        try:
                            await bot.send_message(user_id, format_vacancy(vacancy))
                            sent_count += 1
                            await asyncio.sleep(0.1)  # Anti-flood

                            if sent_count >= 10:  # –õ–∏–º–∏—Ç –Ω–∞ –æ–¥–Ω—É —Ä–∞—Å—Å—ã–ª–∫—É
                                break

                        except Exception as e:
                            logger.error(f"Can't send to {user_id}: {e}")
                            break  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞

            await asyncio.sleep(60 * 30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç

        except Exception as e:
            logger.error(f"Error in check_new_vacancies: {e}")
            await asyncio.sleep(60 * 5)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 5 –º–∏–Ω—É—Ç


async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π
    asyncio.create_task(check_new_vacancies())

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("Starting bot...")
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())