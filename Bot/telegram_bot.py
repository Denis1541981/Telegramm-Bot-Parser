import asyncio
import logging
import os
import sqlite3
from datetime import datetime
from typing import Dict, List, Optional, Tuple

import pandas as pd
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import (InlineKeyboardButton, KeyboardButton, Message,
                           ReplyKeyboardMarkup, InlineKeyboardMarkup)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv, find_dotenv

import hh_ru
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("vacancy_bot.log", "a", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

load_dotenv(find_dotenv('.env'))
bot = Bot(os.getenv("TOKEN"))
dp = Dispatcher()

# –ö–µ—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π
vacancies_cache: Dict[int, Dict] = {}


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite
def init_db():
    with sqlite3.connect('vacancy_bot.db', check_same_thread=False) as conn:
        conn.execute('''
            CREATE TABLE IF NOT EXISTS subscribers (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                subscribed_at TIMESTAMP,
                filters TEXT
            )
        ''')
        conn.commit()


init_db()


def get_main_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="/help"), KeyboardButton(text="/subscribe")],
            [KeyboardButton(text="/unsubscribe"), KeyboardButton(text="/latest")],
            [KeyboardButton(text="/set_filters"), KeyboardButton(text="/my_filters")]
        ],
        resize_keyboard=True
    )


def get_pagination_keyboard(page: int, total_pages: int, prefix: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if page > 1:
        builder.add(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"{prefix}_prev_{page - 1}"
        ))
    builder.add(InlineKeyboardButton(
        text=f"{page}/{total_pages}",
        callback_data="current_page"
    ))
    if page < total_pages:
        builder.add(InlineKeyboardButton(
            text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è",
            callback_data=f"{prefix}_next_{page + 1}"
        ))
    return builder.as_markup()


def format_vacancy(vacancies_dict: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –≤—ã–≤–æ–¥–∞
    —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    :param vacancies_dict: –°–ª–æ–≤–∞—Ä—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ {id: vacancy_data}
    :return: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏
    """
    if not vacancies_dict:
        return "–ù–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

    result = []

    for vacancy_data in vacancies_dict.values():
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã
            salary = vacancy_data.get('salary_from')

            if salary is None:
                cleaned_salary = '–ó/–ø –Ω–µ —É–∫–∞–∑–∞–Ω–∞'
            elif isinstance(salary, (int, float)):
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—É—é –∑–∞—Ä–ø–ª–∞—Ç—É
                cleaned_salary = f"{int(salary):,} ‚ÇΩ".replace(',', ' ')
            else:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤—É—é –∑–∞—Ä–ø–ª–∞—Ç—É
                cleaned_salary = re.sub(r'\u202f|\xa0', ' ', str(salary)).strip()

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            employer = str(vacancy_data.get('employer_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
            position = str(vacancy_data.get('vacancy_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
            address = str(vacancy_data.get('address', '–õ–æ–∫–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞'))
            url = str(vacancy_data.get('vacancy_url', '#'))

            vacancy_str = (
                f"üè¢ {employer}\n"
                f"üîπ {position}\n"
                f"üíµ {cleaned_salary}\n"
                f"üìç {address}\n"
                f"üîó {url}\n"
            )
            result.append(vacancy_str)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏: {e}")
            continue

    return "\n".join(result) if result else "–ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"


async def get_user_filters(user_id: int) -> List[str]:
    with sqlite3.connect('vacancy_bot.db') as conn:
        cursor = conn.cursor()
        cursor.execute(
            'SELECT filters FROM subscribers WHERE user_id = ?',
            (user_id,)
        )
        result = cursor.fetchone()
    return [f.strip().lower() for f in result[0].split(',')] if result and result[0] else []


async def filter_vacancies(vacancies: Dict, filters: List[str]) -> Dict:
    if not filters:
        return vacancies

    filtered = {}
    for vacancy_id, vacancy_data in vacancies.items():
        vacancy_text = " ".join(str(v) for v in vacancy_data.values()).lower()
        if any(keyword in vacancy_text for keyword in filters):
            filtered[vacancy_id] = vacancy_data
    return filtered


async def get_new_vacancies(per_page=10, page=0, text=''):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π —Å –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        parsed_data = pd.DataFrame(hh_ru.parse_json(hh_ru.get_requests(per_page=per_page, page=page, text=text)))
        parsed_data.set_index('vacancy_id', inplace=True)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        new_vacancies = hh_ru.update_vacancy(parsed_data)
        return new_vacancies

    except Exception as e:
        logger.error(f"get_new_vacancies error: {e}")
        return []


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(CommandStart())
async def process_start_command(message: Message):
    logger.info(f"User {message.from_user.id} started the bot")
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π —Å Zarplata.ru.\n'
        '–ò—Å–ø–æ–ª—å–∑—É–π /subscribe —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏.\n'
        '–ò—Å–ø–æ–ª—å–∑—É–π /latest —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏.\n'
        '–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: /help',
        reply_markup=get_main_keyboard()
    )


@dp.message(Command(commands='help'))
async def process_help_command(message: Message):
    await message.answer(
        'üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n'
        '/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n'
        '/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n'
        '/subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É\n'
        '/unsubscribe - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏\n'
        '/latest - –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏\n'
        '/set_filters - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º\n'
        '/my_filters - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã',
        reply_markup=get_main_keyboard()
    )


@dp.message(Command(commands='latest'))
async def send_latest_vacancies(message: Message):
    user_id = message.from_user.id
    await message.answer("‚è≥ –ò—â—É –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏...")

    try:
        new_vacancies = await get_new_vacancies()
        if not new_vacancies:
            await message.answer("–ù–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        filters = await get_user_filters(user_id)
        filtered_vacancies = await filter_vacancies(new_vacancies, filters)

        formatted = format_vacancy(filtered_vacancies)
        await message.answer(formatted if formatted else "–ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –≤–∞—à–µ–º—É —Ñ–∏–ª—å—Ç—Ä—É.")

    except Exception as e:
        logger.error(f"Error getting vacancies for {user_id}: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π")


@dp.message(Command(commands='subscribe'))
async def subscribe_user(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or str(user_id)

    with sqlite3.connect('vacancy_bot.db') as conn:
        cursor = conn.cursor()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute('SELECT 1 FROM subscribers WHERE user_id = ?', (user_id,))
        if cursor.fetchone():
            await message.answer("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –≤–∞–∫–∞–Ω—Å–∏–π.")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
        cursor.execute(
            'INSERT INTO subscribers (user_id, username, subscribed_at) VALUES (?, ?, ?)',
            (user_id, username, datetime.now())
        )
        conn.commit()

    await message.answer(
        "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_filters —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.",
        reply_markup=get_main_keyboard()
    )
    logger.info(f"User {user_id} subscribed to vacancies")


@dp.message(Command(commands='unsubscribe'))
async def unsubscribe_user(message: Message):
    user_id = message.from_user.id

    with sqlite3.connect('vacancy_bot.db') as conn:
        cursor = conn.cursor()
        cursor.execute('DELETE FROM subscribers WHERE user_id = ?', (user_id,))
        conn.commit()

    if cursor.rowcount > 0:
        await message.answer(
            "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π.",
            reply_markup=get_main_keyboard()
        )
        logger.info(f"User {user_id} unsubscribed from vacancies")
    else:
        await message.answer("–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.")


async def check_new_vacancies():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    while True:
        try:
            logger.info("Checking for new vacancies...")
            new_vacancies = await get_new_vacancies()

            if not new_vacancies:
                await asyncio.sleep(60 * 30)
                continue

            with sqlite3.connect('vacancy_bot.db') as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT user_id, filters FROM subscribers')
                subscribers = cursor.fetchall()

            for user_id, filters in subscribers:
                try:
                    filters_list = [f.strip().lower() for f in filters.split(',')] if filters else []
                    filtered = await filter_vacancies(new_vacancies, filters_list)

                    if filtered:
                        await bot.send_message(
                            user_id,
                            "–ù–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:\n" + format_vacancy(filtered)
                        )
                        await asyncio.sleep(0.1)
                except Exception as e:
                    logger.error(f"Error sending to user {user_id}: {str(e)}")

            await asyncio.sleep(60 * 30)

        except Exception as e:
            logger.error(f"Error in check_new_vacancies: {str(e)}")
            await asyncio.sleep(60 * 5)


async def main():
    asyncio.create_task(check_new_vacancies())
    logger.info("Starting bot...")
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())